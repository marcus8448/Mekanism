package mekanism.client.model;

import javax.annotation.Nonnull;
import mekanism.common.util.MekanismUtils;
import mekanism.common.util.MekanismUtils.ResourceType;
import net.minecraft.client.model.ModelPart;
import net.minecraft.client.render.RenderLayer;
import net.minecraft.client.render.VertexConsumer;
import net.minecraft.client.render.VertexConsumerProvider;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.util.Identifier;

public class ModelFlamethrower extends MekanismJavaModel {

    private static final Identifier FLAMETHROWER_TEXTURE = MekanismUtils.getResource(ResourceType.RENDER, "flamethrower.png");
    private final RenderLayer RENDER_TYPE = getLayer(FLAMETHROWER_TEXTURE);

    private final ModelPart RingBottom;
    private final ModelPart RingTop;
    private final ModelPart Ring;
    private final ModelPart Axle;
    private final ModelPart AxleBLeft;
    private final ModelPart AxleBRight;
    private final ModelPart AxleTRight;
    private final ModelPart AxleTLeft;
    private final ModelPart Grasp;
    private final ModelPart GraspRod;
    private final ModelPart SupportCentre;
    private final ModelPart SupportFront;
    private final ModelPart SupportRear;
    private final ModelPart LargeBarrel;
    private final ModelPart LargeBarrelDecor;
    private final ModelPart LargeBarrelDecor2;
    private final ModelPart Barrel;
    private final ModelPart BarrelRing;
    private final ModelPart BarrelRing2;
    private final ModelPart Flame;
    private final ModelPart FlameStrut;
    private final ModelPart HydrogenDecor;
    private final ModelPart Hydrogen;

    public ModelFlamethrower() {
        super(RenderLayer::getEntitySolid);
        textureWidth = 64;
        textureHeight = 64;

        RingBottom = new ModelPart(this, 19, 14);
        RingBottom.addCuboid(0F, 0F, 0F, 3, 1, 3, false);
        RingBottom.setPivot(-2F, 19.5F, 1.5F);
        RingBottom.setTextureSize(64, 64);
        RingBottom.mirror = true;
        setRotation(RingBottom, 0F, 0F, 0F);
        RingTop = new ModelPart(this, 19, 14);
        RingTop.addCuboid(0F, 0F, 0F, 3, 1, 3, false);
        RingTop.setPivot(-2F, 13.5F, 1.466667F);
        RingTop.setTextureSize(64, 64);
        RingTop.mirror = true;
        setRotation(RingTop, 0F, 0F, 0F);
        Ring = new ModelPart(this, 0, 14);
        Ring.addCuboid(0F, 0F, 0F, 5, 6, 4, false);
        Ring.setPivot(-3F, 14F, 1F);
        Ring.setTextureSize(64, 64);
        Ring.mirror = true;
        setRotation(Ring, 0F, 0F, 0F);
        Axle = new ModelPart(this, 32, 12);
        Axle.addCuboid(0F, 0F, 0F, 4, 4, 7, false);
        Axle.setPivot(-2.5F, 15F, -6.5F);
        Axle.setTextureSize(64, 64);
        Axle.mirror = true;
        setRotation(Axle, 0F, 0F, 0F);
        AxleBLeft = new ModelPart(this, 0, 25);
        AxleBLeft.addCuboid(-0.5F, -0.5F, 0F, 1, 1, 8, false);
        AxleBLeft.setPivot(-2F, 19F, -7F);
        AxleBLeft.setTextureSize(64, 64);
        AxleBLeft.mirror = true;
        setRotation(AxleBLeft, 0F, 0F, 0.2094395F);
        AxleBRight = new ModelPart(this, 0, 25);
        AxleBRight.addCuboid(-0.5F, -0.5F, 0F, 1, 1, 8, false);
        AxleBRight.setPivot(1F, 19F, -7F);
        AxleBRight.setTextureSize(64, 64);
        AxleBRight.mirror = true;
        setRotation(AxleBRight, 0.0174533F, 0F, -0.2094395F);
        AxleTRight = new ModelPart(this, 0, 25);
        AxleTRight.addCuboid(-0.5F, -0.5F, 0F, 1, 1, 8, false);
        AxleTRight.setPivot(1F, 15F, -7F);
        AxleTRight.setTextureSize(64, 64);
        AxleTRight.mirror = true;
        setRotation(AxleTRight, 0F, 0F, 0.2094395F);
        AxleTLeft = new ModelPart(this, 0, 25);
        AxleTLeft.addCuboid(-0.5F, -0.5F, 0F, 1, 1, 8, false);
        AxleTLeft.setPivot(-2F, 15F, -7F);
        AxleTLeft.setTextureSize(64, 64);
        AxleTLeft.mirror = true;
        setRotation(AxleTLeft, 0F, 0F, -0.2094395F);
        Grasp = new ModelPart(this, 24, 19);
        Grasp.addCuboid(0F, 0F, 0F, 2, 1, 1, false);
        Grasp.setPivot(-1.5F, 13F, -1.1F);
        Grasp.setTextureSize(64, 64);
        Grasp.mirror = true;
        setRotation(Grasp, 0.7807508F, 0F, 0F);
        Grasp.mirror = false;
        GraspRod = new ModelPart(this, 19, 19);
        GraspRod.addCuboid(0F, 0F, 0F, 1, 3, 1, false);
        GraspRod.setPivot(-1F, 13F, -1F);
        GraspRod.setTextureSize(64, 64);
        GraspRod.mirror = true;
        setRotation(GraspRod, 0.2230717F, 0F, 0F);
        SupportCentre = new ModelPart(this, 0, 40);
        SupportCentre.addCuboid(0F, 0F, 0F, 2, 1, 6, false);
        SupportCentre.setPivot(-1.5F, 12.4F, 6.6F);
        SupportCentre.setTextureSize(64, 64);
        SupportCentre.mirror = true;
        setRotation(SupportCentre, -0.1115358F, 0F, 0F);
        SupportFront = new ModelPart(this, 19, 24);
        SupportFront.addCuboid(0F, 0F, 0F, 1, 1, 4, false);
        SupportFront.setPivot(-1F, 13.1F, 12.5F);
        SupportFront.setTextureSize(64, 64);
        SupportFront.mirror = true;
        setRotation(SupportFront, -1.226894F, 0F, 0F);
        SupportRear = new ModelPart(this, 0, 35);
        SupportRear.addCuboid(0F, 0F, 0F, 3, 1, 3, false);
        SupportRear.setPivot(-2F, 14F, 4F);
        SupportRear.setTextureSize(64, 64);
        SupportRear.mirror = true;
        setRotation(SupportRear, 0.5424979F, 0F, 0F);
        LargeBarrel = new ModelPart(this, 19, 48);
        LargeBarrel.addCuboid(0F, 0F, 0F, 2, 3, 7, false);
        LargeBarrel.setPivot(-1.5F, 16F, 4F);
        LargeBarrel.setTextureSize(64, 64);
        LargeBarrel.mirror = true;
        setRotation(LargeBarrel, 0F, 0F, 0F);
        LargeBarrelDecor = new ModelPart(this, 0, 48);
        LargeBarrelDecor.addCuboid(0F, 0F, 0F, 3, 3, 6, false);
        LargeBarrelDecor.setPivot(-2F, 15F, 4F);
        LargeBarrelDecor.setTextureSize(64, 64);
        LargeBarrelDecor.mirror = true;
        setRotation(LargeBarrelDecor, -0.1115358F, 0F, 0F);
        LargeBarrelDecor2 = new ModelPart(this, 17, 41);
        LargeBarrelDecor2.addCuboid(0F, 0F, 0F, 4, 2, 4, false);
        LargeBarrelDecor2.setPivot(-2.5F, 16F, 4F);
        LargeBarrelDecor2.setTextureSize(64, 64);
        LargeBarrelDecor2.mirror = true;
        setRotation(LargeBarrelDecor2, 0F, 0F, 0F);
        Barrel = new ModelPart(this, 19, 30);
        Barrel.addCuboid(0F, 0F, 0F, 2, 2, 8, false);
        Barrel.setPivot(-1.5F, 16.5F, 11F);
        Barrel.setTextureSize(64, 64);
        Barrel.mirror = true;
        setRotation(Barrel, 0F, 0F, 0F);
        BarrelRing = new ModelPart(this, 30, 25);
        BarrelRing.addCuboid(0F, 0F, 0F, 3, 3, 1, false);
        BarrelRing.setPivot(-2F, 16F, 13F);
        BarrelRing.setTextureSize(64, 64);
        BarrelRing.mirror = true;
        setRotation(BarrelRing, 0F, 0F, 0F);
        BarrelRing2 = new ModelPart(this, 30, 25);
        BarrelRing2.addCuboid(0F, 0F, 0F, 3, 3, 1, false);
        BarrelRing2.setPivot(-2F, 16F, 17F);
        BarrelRing2.setTextureSize(64, 64);
        BarrelRing2.mirror = true;
        setRotation(BarrelRing2, 0F, 0F, 0F);
        Flame = new ModelPart(this, 38, 0);
        Flame.addCuboid(0F, 0F, 0F, 1, 1, 2, false);
        Flame.setPivot(-1F, 19.5F, 19F);
        Flame.setTextureSize(64, 64);
        Flame.mirror = true;
        setRotation(Flame, 0.7063936F, 0F, 0F);
        FlameStrut = new ModelPart(this, 27, 0);
        FlameStrut.addCuboid(0F, 0F, 0F, 2, 1, 3, false);
        FlameStrut.setPivot(-1.466667F, 18.5F, 17F);
        FlameStrut.setTextureSize(64, 64);
        FlameStrut.mirror = true;
        setRotation(FlameStrut, -0.2602503F, 0F, 0F);
        HydrogenDecor = new ModelPart(this, 27, 5);
        HydrogenDecor.addCuboid(0F, 0F, 0F, 3, 1, 5, false);
        HydrogenDecor.setPivot(1.5F, 15.66667F, -4.933333F);
        HydrogenDecor.setTextureSize(64, 64);
        HydrogenDecor.mirror = true;
        setRotation(HydrogenDecor, 0F, 0F, 0.4438713F);
        Hydrogen = new ModelPart(this, 0, 0);
        Hydrogen.addCuboid(0F, 0F, 0F, 3, 3, 10, false);
        Hydrogen.setPivot(1.5F, 16F, -5.5F);
        Hydrogen.setTextureSize(64, 64);
        Hydrogen.mirror = true;
        setRotation(Hydrogen, 0F, 0F, 0.4438713F);
    }

    public void render(@Nonnull MatrixStack matrix, @Nonnull VertexConsumerProvider renderer, int light, int overlayLight, boolean hasEffect) {
        render(matrix, getVertexBuilder(renderer, RENDER_TYPE, hasEffect), light, overlayLight, 1, 1, 1, 1);
    }

    @Override
    public void render(@Nonnull MatrixStack matrix, @Nonnull VertexConsumer vertexBuilder, int light, int overlayLight, float red, float green, float blue, float alpha) {
        RingBottom.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        RingTop.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        Ring.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        Axle.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        AxleBLeft.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        AxleBRight.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        AxleTRight.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        AxleTLeft.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        Grasp.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        GraspRod.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        SupportCentre.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        SupportFront.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        SupportRear.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        LargeBarrel.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        LargeBarrelDecor.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        LargeBarrelDecor2.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        Barrel.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        BarrelRing.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        BarrelRing2.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        Flame.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        FlameStrut.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        HydrogenDecor.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        Hydrogen.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
    }
}
package mekanism.client.model;

import javax.annotation.Nonnull;
import mekanism.client.render.MekanismRenderer;
import mekanism.common.util.MekanismUtils;
import mekanism.common.util.MekanismUtils.ResourceType;
import net.minecraft.client.model.ModelPart;
import net.minecraft.client.render.OverlayTexture;
import net.minecraft.client.render.RenderLayer;
import net.minecraft.client.render.VertexConsumer;
import net.minecraft.client.render.VertexConsumerProvider;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.util.Identifier;

public class ModelSolarNeutronActivator extends MekanismJavaModel {

    private static final Identifier ACTIVATOR_TEXTURE = MekanismUtils.getResource(ResourceType.RENDER, "solar_neutron_activator.png");
    private final RenderLayer RENDER_TYPE = getLayer(ACTIVATOR_TEXTURE);

    private final ExtendedModelRenderer pole;
    private final ExtendedModelRenderer panel3;
    private final ExtendedModelRenderer port;
    private final ExtendedModelRenderer panel1;
    private final ExtendedModelRenderer panel2;
    private final ExtendedModelRenderer panelBase;
    private final ExtendedModelRenderer panelBraceLeft2;
    private final ExtendedModelRenderer panelBraceRight2;
    private final ExtendedModelRenderer panelBraceLeft1;
    private final ExtendedModelRenderer panelBraceRight1;
    private final ExtendedModelRenderer panelBrace;
    private final ExtendedModelRenderer bridge;
    private final ExtendedModelRenderer platform;
    private final ExtendedModelRenderer hole2;
    private final ExtendedModelRenderer hole4;
    private final ExtendedModelRenderer hole1;
    private final ExtendedModelRenderer hole3;
    private final ExtendedModelRenderer brace2;
    private final ExtendedModelRenderer tube2c;
    private final ExtendedModelRenderer tube1b;
    private final ExtendedModelRenderer tube1c;
    private final ExtendedModelRenderer tube2b;
    private final ExtendedModelRenderer tube2a;
    private final ExtendedModelRenderer tube1a;
    private final ExtendedModelRenderer conduit;
    private final ExtendedModelRenderer brace1;
    private final ExtendedModelRenderer tank;
    private final ExtendedModelRenderer laser;
    private final ExtendedModelRenderer base;
    private final ExtendedModelRenderer support1;
    private final ExtendedModelRenderer support2;
    private final ExtendedModelRenderer support3;
    private final ExtendedModelRenderer support4;
    private final ExtendedModelRenderer support5;
    private final ExtendedModelRenderer support6;
    private final ExtendedModelRenderer support7;
    private final ExtendedModelRenderer support8;
    private final ExtendedModelRenderer support9;
    private final ExtendedModelRenderer support10;
    private final ExtendedModelRenderer support11;
    private final ExtendedModelRenderer support12;
    private final ExtendedModelRenderer support13;
    private final ExtendedModelRenderer support14;
    private final ExtendedModelRenderer support15;
    private final ExtendedModelRenderer support16;
    private final ExtendedModelRenderer portConnector;
    private final ModelPart laserBeamToggle;

    public ModelSolarNeutronActivator() {
        super(RenderLayer::getEntityCutout);
        textureWidth = 128;
        textureHeight = 64;

        pole = new ExtendedModelRenderer(this, 116, 0);
        pole.addCuboid(0F, 0F, 0F, 4, 15, 2, false);
        pole.setPivot(-2F, -5F, 6F);
        pole.setTextureSize(128, 64);
        pole.mirror = true;
        setRotation(pole, 0F, 0F, 0F);
        panel3 = new ExtendedModelRenderer(this, 84, 32);
        panel3.addCuboid(-6F, 0F, -16F, 6, 1, 16, false);
        panel3.setPivot(-2.75F, -4.95F, 8F);
        panel3.setTextureSize(128, 64);
        panel3.mirror = true;
        setRotation(panel3, -0.1082104F, 0.0279253F, 0.2617994F);
        port = new ExtendedModelRenderer(this, 0, 45);
        port.addCuboid(0F, 0F, 0F, 8, 8, 1, false);
        port.setPivot(-4F, 12F, -8.01F);
        port.setTextureSize(128, 64);
        port.mirror = true;
        setRotation(port, 0F, 0F, 0F);
        panel1 = new ExtendedModelRenderer(this, 84, 32);
        panel1.mirror = true;
        panel1.addCuboid(0F, 0F, -16F, 6, 1, 16, true);
        panel1.setPivot(2.75F, -4.95F, 8F);
        panel1.setTextureSize(128, 64);
        setRotation(panel1, -0.1082104F, -0.0279253F, -0.2617994F);
        panel2 = new ExtendedModelRenderer(this, 84, 15);
        panel2.addCuboid(0F, 0F, -16F, 6, 1, 16, false);
        panel2.setPivot(-3F, -5F, 8F);
        panel2.setTextureSize(128, 64);
        panel2.mirror = true;
        setRotation(panel2, -0.1047198F, 0F, 0F);
        panelBase = new ExtendedModelRenderer(this, 28, 45);
        panelBase.addCuboid(0F, 1F, -16F, 6, 1, 14, false);
        panelBase.setPivot(-3F, -5F, 9F);
        panelBase.setTextureSize(128, 64);
        panelBase.mirror = true;
        setRotation(panelBase, -0.1047198F, 0F, 0F);
        panelBraceLeft2 = new ExtendedModelRenderer(this, 64, 15);
        panelBraceLeft2.addCuboid(-4F, 0.5F, -5F, 5, 1, 2, false);
        panelBraceLeft2.setPivot(-3F, -5F, 9F);
        panelBraceLeft2.setTextureSize(128, 64);
        panelBraceLeft2.mirror = true;
        setRotation(panelBraceLeft2, -0.1047198F, 0F, 0.2505517F);
        panelBraceRight2 = new ExtendedModelRenderer(this, 64, 15);
        panelBraceRight2.addCuboid(-1F, 0.5F, -5F, 5, 1, 2, false);
        panelBraceRight2.setPivot(3F, -5F, 9F);
        panelBraceRight2.setTextureSize(128, 64);
        panelBraceRight2.mirror = true;
        setRotation(panelBraceRight2, -0.1047198F, 0F, -0.2555938F);
        panelBraceLeft1 = new ExtendedModelRenderer(this, 64, 15);
        panelBraceLeft1.addCuboid(-4F, 0.5F, -15F, 5, 1, 2, false);
        panelBraceLeft1.setPivot(-3F, -5F, 9F);
        panelBraceLeft1.setTextureSize(128, 64);
        panelBraceLeft1.mirror = true;
        setRotation(panelBraceLeft1, -0.1047198F, 0F, 0.2505517F);
        panelBraceRight1 = new ExtendedModelRenderer(this, 64, 15);
        panelBraceRight1.addCuboid(-1F, 0.5F, -15F, 5, 1, 2, false);
        panelBraceRight1.setPivot(3F, -5F, 9F);
        panelBraceRight1.setTextureSize(128, 64);
        panelBraceRight1.mirror = true;
        setRotation(panelBraceRight1, -0.1047198F, 0F, -0.2555938F);
        panelBrace = new ExtendedModelRenderer(this, 56, 18);
        panelBrace.addCuboid(0F, 1.2F, -10F, 2, 2, 9, false);
        panelBrace.setPivot(-1F, -5F, 8F);
        panelBrace.setTextureSize(128, 64);
        panelBrace.mirror = true;
        setRotation(panelBrace, -0.1047198F, 0F, 0F);
        bridge = new ExtendedModelRenderer(this, 65, 1);
        bridge.addCuboid(0F, 0F, 0F, 12, 1, 13, false);
        bridge.setPivot(-6F, 19F, -6F);
        bridge.setTextureSize(128, 64);
        bridge.mirror = true;
        setRotation(bridge, 0F, 0F, 0F);
        platform = new ExtendedModelRenderer(this, 18, 45);
        platform.addCuboid(-2.5F, 1F, -2.5F, 6, 3, 6, false);
        platform.setPivot(-0.5F, 8F, -2.5F);
        platform.setTextureSize(128, 64);
        platform.mirror = true;
        setRotation(platform, -0.1047198F, 0F, 0F);
        hole2 = new ExtendedModelRenderer(this, 0, 6);
        hole2.addCuboid(1F, 0F, 0F, 1, 2, 1, false);
        hole2.setPivot(-0.5F, 8F, -2.5F);
        hole2.setTextureSize(128, 64);
        hole2.mirror = true;
        setRotation(hole2, -0.1047198F, 0F, 0F);
        hole4 = new ExtendedModelRenderer(this, 0, 3);
        hole4.addCuboid(-1F, 0F, 1F, 3, 2, 1, false);
        hole4.setPivot(-0.5F, 8F, -2.5F);
        hole4.setTextureSize(128, 64);
        hole4.mirror = true;
        setRotation(hole4, -0.1047198F, 0F, 0F);
        hole1 = new ExtendedModelRenderer(this, 0, 3);
        hole1.addCuboid(-1F, 0F, -1F, 3, 2, 1, false);
        hole1.setPivot(-0.5F, 8F, -2.5F);
        hole1.setTextureSize(128, 64);
        hole1.mirror = true;
        setRotation(hole1, -0.1047198F, 0F, 0F);
        hole3 = new ExtendedModelRenderer(this, 0, 6);
        hole3.addCuboid(-1F, 0F, 0F, 1, 2, 1, false);
        hole3.setPivot(-0.5F, 8F, -2.5F);
        hole3.setTextureSize(128, 64);
        hole3.mirror = true;
        setRotation(hole3, -0.1047198F, 0F, 0F);
        brace2 = new ExtendedModelRenderer(this, 0, 11);
        brace2.addCuboid(0F, 0F, 0F, 1, 1, 2, false);
        brace2.setPivot(1F, 9.5F, -7.1F);
        brace2.setTextureSize(128, 64);
        brace2.mirror = true;
        setRotation(brace2, 0.1745329F, 0F, 0F);
        tube2c = new ExtendedModelRenderer(this, 0, 9);
        tube2c.addCuboid(0F, 0F, 0F, 1, 1, 1, false);
        tube2c.setPivot(2F, 9F, 4F);
        tube2c.setTextureSize(128, 64);
        tube2c.mirror = true;
        setRotation(tube2c, 0F, 0F, 0F);
        tube1b = new ExtendedModelRenderer(this, 0, 14);
        tube1b.addCuboid(0F, 0F, 0F, 6, 1, 1, false);
        tube1b.setPivot(-3F, 8F, 2F);
        tube1b.setTextureSize(128, 64);
        tube1b.mirror = true;
        setRotation(tube1b, 0F, 0F, 0F);
        tube1c = new ExtendedModelRenderer(this, 0, 9);
        tube1c.addCuboid(0F, 0F, 0F, 1, 1, 1, false);
        tube1c.setPivot(2F, 9F, 2F);
        tube1c.setTextureSize(128, 64);
        tube1c.mirror = true;
        setRotation(tube1c, 0F, 0F, 0F);
        tube2b = new ExtendedModelRenderer(this, 0, 14);
        tube2b.addCuboid(0F, 0F, 0F, 6, 1, 1, false);
        tube2b.setPivot(-3F, 8F, 4F);
        tube2b.setTextureSize(128, 64);
        tube2b.mirror = true;
        setRotation(tube2b, 0F, 0F, 0F);
        tube2a = new ExtendedModelRenderer(this, 0, 9);
        tube2a.addCuboid(0F, 0F, 0F, 1, 1, 1, false);
        tube2a.setPivot(-3F, 9F, 4F);
        tube2a.setTextureSize(128, 64);
        tube2a.mirror = true;
        setRotation(tube2a, 0F, 0F, 0F);
        tube1a = new ExtendedModelRenderer(this, 0, 9);
        tube1a.addCuboid(0F, 0F, 0F, 1, 1, 1, false);
        tube1a.setPivot(-3F, 9F, 2F);
        tube1a.setTextureSize(128, 64);
        tube1a.mirror = true;
        setRotation(tube1a, 0F, 0F, 0F);
        conduit = new ExtendedModelRenderer(this, 48, 0);
        conduit.addCuboid(0F, 0F, 0F, 2, 1, 7, false);
        conduit.setPivot(-1F, 9.5F, -1F);
        conduit.setTextureSize(128, 64);
        conduit.mirror = true;
        setRotation(conduit, 0F, 0F, 0F);
        brace1 = new ExtendedModelRenderer(this, 0, 11);
        brace1.addCuboid(0F, 0F, 0F, 1, 1, 2, false);
        brace1.setPivot(-2F, 9.5F, -7.1F);
        brace1.setTextureSize(128, 64);
        brace1.mirror = true;
        setRotation(brace1, 0.1745329F, 0F, 0F);
        tank = new ExtendedModelRenderer(this, 0, 0);
        tank.addCuboid(0F, 0F, 0F, 16, 9, 16, false);
        tank.setPivot(-8F, 10F, -8F);
        tank.setTextureSize(128, 64);
        tank.mirror = true;
        setRotation(tank, 0F, 0F, 0F);
        laser = new ExtendedModelRenderer(this, 4, 0);
        laser.addCuboid(0.5F, 2.1F, -9F, 1, 2, 1, false);
        laser.setPivot(-1F, -5F, 8F);
        laser.setTextureSize(128, 64);
        laser.mirror = true;
        setRotation(laser, -0.1117011F, 0F, 0F);
        base = new ExtendedModelRenderer(this, 0, 25);
        base.addCuboid(0F, 0F, 0F, 16, 4, 16, false);
        base.setPivot(-8F, 20F, -8F);
        base.setTextureSize(128, 64);
        base.mirror = true;
        setRotation(base, 0F, 0F, 0F);
        support1 = new ExtendedModelRenderer(this, 0, 0);
        support1.addCuboid(0F, 0F, 0F, 1, 1, 1, false);
        support1.setPivot(6.5F, 19F, -7.5F);
        support1.setTextureSize(128, 64);
        support1.mirror = true;
        setRotation(support1, 0F, 0F, 0F);
        support2 = new ExtendedModelRenderer(this, 0, 0);
        support2.addCuboid(0F, 0F, 0F, 1, 1, 1, false);
        support2.setPivot(6.5F, 19F, 6.5F);
        support2.setTextureSize(128, 64);
        support2.mirror = true;
        setRotation(support2, 0F, 0F, 0F);
        support3 = new ExtendedModelRenderer(this, 0, 0);
        support3.addCuboid(0F, 0F, 0F, 1, 1, 1, false);
        support3.setPivot(6.5F, 19F, -5.5F);
        support3.setTextureSize(128, 64);
        support3.mirror = true;
        setRotation(support3, 0F, 0F, 0F);
        support4 = new ExtendedModelRenderer(this, 0, 0);
        support4.addCuboid(0F, 0F, 0F, 1, 1, 1, false);
        support4.setPivot(6.5F, 19F, -3.5F);
        support4.setTextureSize(128, 64);
        support4.mirror = true;
        setRotation(support4, 0F, 0F, 0F);
        support5 = new ExtendedModelRenderer(this, 0, 0);
        support5.addCuboid(0F, 0F, 0F, 1, 1, 1, false);
        support5.setPivot(6.5F, 19F, -1.5F);
        support5.setTextureSize(128, 64);
        support5.mirror = true;
        setRotation(support5, 0F, 0F, 0F);
        support6 = new ExtendedModelRenderer(this, 0, 0);
        support6.addCuboid(0F, 0F, 0F, 1, 1, 1, false);
        support6.setPivot(6.5F, 19F, 0.5F);
        support6.setTextureSize(128, 64);
        support6.mirror = true;
        setRotation(support6, 0F, 0F, 0F);
        support7 = new ExtendedModelRenderer(this, 0, 0);
        support7.addCuboid(0F, 0F, 0F, 1, 1, 1, false);
        support7.setPivot(6.5F, 19F, 2.5F);
        support7.setTextureSize(128, 64);
        support7.mirror = true;
        setRotation(support7, 0F, 0F, 0F);
        support8 = new ExtendedModelRenderer(this, 0, 0);
        support8.addCuboid(0F, 0F, 0F, 1, 1, 1, false);
        support8.setPivot(6.5F, 19F, 4.5F);
        support8.setTextureSize(128, 64);
        support8.mirror = true;
        setRotation(support8, 0F, 0F, 0F);
        support9 = new ExtendedModelRenderer(this, 0, 0);
        support9.addCuboid(0F, 0F, 0F, 1, 1, 1, false);
        support9.setPivot(-7.5F, 19F, 6.5F);
        support9.setTextureSize(128, 64);
        support9.mirror = true;
        setRotation(support9, 0F, 0F, 0F);
        support10 = new ExtendedModelRenderer(this, 0, 0);
        support10.addCuboid(0F, 0F, 0F, 1, 1, 1, false);
        support10.setPivot(-7.5F, 19F, 4.5F);
        support10.setTextureSize(128, 64);
        support10.mirror = true;
        setRotation(support10, 0F, 0F, 0F);
        support11 = new ExtendedModelRenderer(this, 0, 0);
        support11.addCuboid(0F, 0F, 0F, 1, 1, 1, false);
        support11.setPivot(-7.5F, 19F, 2.5F);
        support11.setTextureSize(128, 64);
        support11.mirror = true;
        setRotation(support11, 0F, 0F, 0F);
        support12 = new ExtendedModelRenderer(this, 0, 0);
        support12.addCuboid(0F, 0F, 0F, 1, 1, 1, false);
        support12.setPivot(-7.5F, 19F, 0.5F);
        support12.setTextureSize(128, 64);
        support12.mirror = true;
        setRotation(support12, 0F, 0F, 0F);
        support13 = new ExtendedModelRenderer(this, 0, 0);
        support13.addCuboid(0F, 0F, 0F, 1, 1, 1, false);
        support13.setPivot(-7.5F, 19F, -1.5F);
        support13.setTextureSize(128, 64);
        support13.mirror = true;
        setRotation(support13, 0F, 0F, 0F);
        support14 = new ExtendedModelRenderer(this, 0, 0);
        support14.addCuboid(0F, 0F, 0F, 1, 1, 1, false);
        support14.setPivot(-7.5F, 19F, -3.5F);
        support14.setTextureSize(128, 64);
        support14.mirror = true;
        setRotation(support14, 0F, 0F, 0F);
        support15 = new ExtendedModelRenderer(this, 0, 0);
        support15.addCuboid(0F, 0F, 0F, 1, 1, 1, false);
        support15.setPivot(-7.5F, 19F, -5.5F);
        support15.setTextureSize(128, 64);
        support15.mirror = true;
        setRotation(support15, 0F, 0F, 0F);
        support16 = new ExtendedModelRenderer(this, 0, 0);
        support16.addCuboid(0F, 0F, 0F, 1, 1, 1, false);
        support16.setPivot(-7.5F, 19F, -7.5F);
        support16.setTextureSize(128, 64);
        support16.mirror = true;
        setRotation(support16, 0F, 0F, 0F);
        portConnector = new ExtendedModelRenderer(this, 0, 14);
        portConnector.addCuboid(0F, 0F, 0F, 6, 1, 1, false);
        portConnector.setPivot(-3F, 19F, -7.01F);
        portConnector.setTextureSize(128, 64);
        portConnector.mirror = true;
        setRotation(portConnector, 0F, 0F, 0F);
        laserBeamToggle = new ModelPart(this, 12, 0);
        laserBeamToggle.addCuboid(0.5F, 4.1F, -9F, 1, 11, 1, false);
        laserBeamToggle.setPivot(-1F, -5F, 8F);
        laserBeamToggle.setTextureSize(128, 64);
        laserBeamToggle.mirror = true;
        setRotation(laserBeamToggle, -0.1117011F, 0F, 0F);
    }

    public void render(@Nonnull MatrixStack matrix, @Nonnull VertexConsumerProvider renderer, int light, int overlayLight, boolean hasEffect) {
        render(matrix, getVertexBuilder(renderer, RENDER_TYPE, hasEffect), light, overlayLight, 1, 1, 1, 1);
    }

    @Override
    public void render(@Nonnull MatrixStack matrix, @Nonnull VertexConsumer vertexBuilder, int light, int overlayLight, float red, float green, float blue, float alpha) {
        render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, false);
        //TODO: Figure out if there is there supposed to be a "laser" here?
        laserBeamToggle.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
    }

    public void renderWireFrame(MatrixStack matrix, VertexConsumer vertexBuilder, float red, float green, float blue, float alpha) {
        render(matrix, vertexBuilder, MekanismRenderer.FULL_LIGHT, OverlayTexture.DEFAULT_UV, red, green, blue, alpha, true);
    }

    private void render(MatrixStack matrix, VertexConsumer vertexBuilder, int light, int overlayLight, float red, float green, float blue, float alpha, boolean wireFrame) {
        pole.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        panel3.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        port.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        panel1.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        panel2.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        panelBase.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        panelBraceLeft2.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        panelBraceRight2.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        panelBraceLeft1.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        panelBraceRight1.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        panelBrace.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        bridge.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        platform.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        hole2.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        hole4.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        hole1.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        hole3.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        brace2.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        tube2c.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        tube1b.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        tube1c.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        tube2b.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        tube2a.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        tube1a.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        conduit.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        brace1.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        tank.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        laser.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        base.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        support1.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        support2.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        support3.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        support4.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        support5.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        support6.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        support7.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        support8.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        support9.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        support10.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        support11.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        support12.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        support13.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        support14.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        support15.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        support16.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
        portConnector.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha, wireFrame);
    }
}
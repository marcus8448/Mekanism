package mekanism.client.model;

import javax.annotation.Nonnull;
import mekanism.client.render.MekanismRenderType;
import mekanism.client.render.MekanismRenderer;
import mekanism.common.util.MekanismUtils;
import mekanism.common.util.MekanismUtils.ResourceType;
import net.minecraft.client.model.ModelPart;
import net.minecraft.client.render.RenderLayer;
import net.minecraft.client.render.VertexConsumer;
import net.minecraft.client.render.VertexConsumerProvider;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.util.Identifier;

public class ModelScubaMask extends MekanismJavaModel {

    private static final Identifier MASK_TEXTURE = MekanismUtils.getResource(ResourceType.RENDER, "scuba_set.png");
    private static final RenderLayer GLASS_RENDER_TYPE = MekanismRenderType.mekStandard(MASK_TEXTURE);
    private final RenderLayer RENDER_TYPE = getLayer(MASK_TEXTURE);

    private final ModelPart helmetFeed;
    private final ModelPart tubeBack;
    private final ModelPart tubeL;
    private final ModelPart tubeR;
    private final ModelPart tubeFront;
    private final ModelPart mouthIntake;
    private final ModelPart finUpperR;
    private final ModelPart finUpperL;
    private final ModelPart finMidR;
    private final ModelPart finMidL;
    private final ModelPart finBack;
    private final ModelPart topPlate;
    private final ModelPart filterL;
    private final ModelPart filterR;
    private final ModelPart filterPipeLower;
    private final ModelPart filterPipeUpper;
    private final ModelPart glassTop;
    private final ModelPart glassFront;
    private final ModelPart glassR;
    private final ModelPart glassL;
    private final ModelPart glassBackR;
    private final ModelPart glassBackL;
    private final ModelPart pipeCornerFL;
    private final ModelPart pipeCornerFR;
    private final ModelPart pipeCornerBR;
    private final ModelPart pipeCornerBL;
    private final ModelPart lightL;
    private final ModelPart lightR;

    public ModelScubaMask() {
        super(RenderLayer::getEntitySolid);
        textureWidth = 128;
        textureHeight = 64;

        helmetFeed = new ModelPart(this, 88, 43);
        helmetFeed.addCuboid(-2F, -2F, 2F, 4, 3, 4, false);
        helmetFeed.setPivot(0F, 0F, 0F);
        helmetFeed.setTextureSize(128, 64);
        helmetFeed.mirror = true;
        setRotation(helmetFeed, 0F, 0F, 0F);
        tubeBack = new ModelPart(this, 106, 50);
        tubeBack.addCuboid(-4.5F, -1F, 4.5F, 9, 1, 1, false);
        tubeBack.setPivot(0F, 0F, 0F);
        tubeBack.setTextureSize(128, 64);
        tubeBack.mirror = true;
        setRotation(tubeBack, 0F, 0F, 0F);
        tubeL = new ModelPart(this, 106, 54);
        tubeL.addCuboid(4.5F, -1F, -4.5F, 1, 1, 9, false);
        tubeL.setPivot(0F, 0F, 0F);
        tubeL.setTextureSize(128, 64);
        tubeL.mirror = true;
        setRotation(tubeL, 0F, 0F, 0F);
        tubeR = new ModelPart(this, 106, 54);
        tubeR.addCuboid(-5.5F, -1F, -4.5F, 1, 1, 9, false);
        tubeR.setPivot(0F, 0F, 0F);
        tubeR.setTextureSize(128, 64);
        tubeR.mirror = true;
        setRotation(tubeR, 0F, 0F, 0F);
        tubeFront = new ModelPart(this, 106, 50);
        tubeFront.addCuboid(-4.5F, -1F, -5.5F, 9, 1, 1, false);
        tubeFront.setPivot(0F, 0F, 0F);
        tubeFront.setTextureSize(128, 64);
        tubeFront.mirror = true;
        setRotation(tubeFront, 0F, 0F, 0F);
        mouthIntake = new ModelPart(this, 118, 42);
        mouthIntake.addCuboid(-1.5F, -0.7F, -6F, 3, 2, 3, false);
        mouthIntake.setPivot(0F, -2F, 0F);
        mouthIntake.setTextureSize(128, 64);
        mouthIntake.mirror = true;
        setRotation(mouthIntake, 0.2094395F, 0F, 0F);
        finUpperR = new ModelPart(this, 78, 50);
        finUpperR.addCuboid(-6F, -7.5F, -3.3F, 1, 2, 12, false);
        finUpperR.setPivot(0F, 0F, 0F);
        finUpperR.setTextureSize(128, 64);
        finUpperR.mirror = true;
        setRotation(finUpperR, 0.0698132F, 0F, 0F);
        finUpperL = new ModelPart(this, 78, 50);
        finUpperL.addCuboid(5F, -7.5F, -3.3F, 1, 2, 12, false);
        finUpperL.setPivot(0F, 0F, 0F);
        finUpperL.setTextureSize(128, 64);
        finUpperL.mirror = true;
        setRotation(finUpperL, 0.0698132F, 0F, 0F);
        finUpperL.mirror = false;
        finMidR = new ModelPart(this, 72, 34);
        finMidR.addCuboid(-7.5F, -6F, -1F, 2, 2, 5, false);
        finMidR.setPivot(0F, 0F, 0F);
        finMidR.setTextureSize(128, 64);
        finMidR.mirror = true;
        setRotation(finMidR, 0F, 0F, 0F);
        finMidL = new ModelPart(this, 72, 34);
        finMidL.addCuboid(5.5F, -6F, -1F, 2, 2, 5, false);
        finMidL.setPivot(0F, 0F, 0F);
        finMidL.setTextureSize(128, 64);
        finMidL.mirror = true;
        setRotation(finMidL, 0F, 0F, 0F);
        finMidL.mirror = false;
        finBack = new ModelPart(this, 80, 0);
        finBack.addCuboid(-1F, -9.6F, 2.5F, 2, 10, 3, false);
        finBack.setPivot(0F, 0F, 0F);
        finBack.setTextureSize(128, 64);
        finBack.mirror = true;
        setRotation(finBack, 0F, 0F, 0F);
        topPlate = new ModelPart(this, 104, 34);
        topPlate.addCuboid(-3F, -10F, -2F, 6, 2, 6, false);
        topPlate.setPivot(0F, 0F, 0F);
        topPlate.setTextureSize(128, 64);
        topPlate.mirror = true;
        setRotation(topPlate, 0.1396263F, 0F, 0F);
        filterL = new ModelPart(this, 108, 42);
        filterL.addCuboid(3.4F, -1.8F, -5F, 2, 3, 3, false);
        filterL.setPivot(0F, 0F, 0F);
        filterL.setTextureSize(128, 64);
        filterL.mirror = true;
        setRotation(filterL, 0F, 0.3839724F, 0.5061455F);
        filterL.mirror = false;
        filterR = new ModelPart(this, 108, 42);
        filterR.addCuboid(-5.4F, -1.8F, -5F, 2, 3, 3, false);
        filterR.setPivot(0F, 0F, 0F);
        filterR.setTextureSize(128, 64);
        filterR.mirror = true;
        setRotation(filterR, 0F, -0.3839724F, -0.5061455F);
        filterPipeLower = new ModelPart(this, 92, 41);
        filterPipeLower.addCuboid(-3F, 1F, -5F, 5, 1, 1, false);
        filterPipeLower.setPivot(0F, 0F, 0F);
        filterPipeLower.setTextureSize(128, 64);
        filterPipeLower.mirror = true;
        setRotation(filterPipeLower, 0F, 0F, 0F);
        filterPipeUpper = new ModelPart(this, 104, 42);
        filterPipeUpper.addCuboid(-0.5F, 0F, -5F, 1, 1, 1, false);
        filterPipeUpper.setPivot(0F, 0F, 0F);
        filterPipeUpper.setTextureSize(128, 64);
        filterPipeUpper.mirror = true;
        setRotation(filterPipeUpper, 0F, 0F, 0F);
        glassTop = new ModelPart(this, 0, 0);
        glassTop.addCuboid(-4F, -9F, -4F, 8, 1, 8, false);
        glassTop.setPivot(0F, 0F, 0F);
        glassTop.setTextureSize(128, 64);
        glassTop.mirror = true;
        setRotation(glassTop, 0F, 0F, 0F);
        glassFront = new ModelPart(this, 0, 0);
        glassFront.addCuboid(-4F, -8F, -5F, 8, 7, 1, false);
        glassFront.setPivot(0F, 0F, 0F);
        glassFront.setTextureSize(128, 64);
        glassFront.mirror = true;
        setRotation(glassFront, 0F, 0F, 0F);
        glassR = new ModelPart(this, 0, 0);
        glassR.addCuboid(-5F, -8F, -4F, 1, 7, 8, false);
        glassR.setPivot(0F, 0F, 0F);
        glassR.setTextureSize(128, 64);
        glassR.mirror = true;
        setRotation(glassR, 0F, 0F, 0F);
        glassL = new ModelPart(this, 0, 0);
        glassL.addCuboid(4F, -8F, -4F, 1, 7, 8, false);
        glassL.setPivot(0F, 0F, 0F);
        glassL.setTextureSize(128, 64);
        glassL.mirror = true;
        setRotation(glassL, 0F, 0F, 0F);
        glassBackR = new ModelPart(this, 0, 0);
        glassBackR.addCuboid(-4F, -8F, 4F, 3, 7, 1, false);
        glassBackR.setPivot(0F, 0F, 0F);
        glassBackR.setTextureSize(128, 64);
        glassBackR.mirror = true;
        setRotation(glassBackR, 0F, 0F, 0F);
        glassBackL = new ModelPart(this, 0, 0);
        glassBackL.addCuboid(1F, -8F, 4F, 3, 7, 1, false);
        glassBackL.setPivot(0F, 0F, 0F);
        glassBackL.setTextureSize(128, 64);
        glassBackL.mirror = true;
        setRotation(glassBackL, 0F, 0F, 0F);
        pipeCornerFL = new ModelPart(this, 109, 50);
        pipeCornerFL.addCuboid(3.5F, -1F, -4.5F, 1, 1, 1, false);
        pipeCornerFL.setPivot(0F, 0F, 0F);
        pipeCornerFL.setTextureSize(128, 64);
        pipeCornerFL.mirror = true;
        setRotation(pipeCornerFL, 0F, 0F, 0F);
        pipeCornerFR = new ModelPart(this, 109, 50);
        pipeCornerFR.addCuboid(-4.5F, -1F, -4.5F, 1, 1, 1, false);
        pipeCornerFR.setPivot(0F, 0F, 0F);
        pipeCornerFR.setTextureSize(128, 64);
        pipeCornerFR.mirror = true;
        setRotation(pipeCornerFR, 0F, 0F, 0F);
        pipeCornerBR = new ModelPart(this, 109, 50);
        pipeCornerBR.addCuboid(-4.5F, -1F, 3.5F, 1, 1, 1, false);
        pipeCornerBR.setPivot(0F, 0F, 0F);
        pipeCornerBR.setTextureSize(128, 64);
        pipeCornerBR.mirror = true;
        setRotation(pipeCornerBR, 0F, 0F, 0F);
        pipeCornerBL = new ModelPart(this, 109, 50);
        pipeCornerBL.addCuboid(3.5F, -1F, 4.5F, 1, 1, 1, false);
        pipeCornerBL.setPivot(0F, 0F, -1F);
        pipeCornerBL.setTextureSize(128, 64);
        pipeCornerBL.mirror = true;
        setRotation(pipeCornerBL, 0F, 0F, 0F);
        lightL = new ModelPart(this, 89, 37);
        lightL.addCuboid(5.5F, -6F, -2F, 2, 2, 1, false);
        lightL.setPivot(0F, 0F, 0F);
        lightL.setTextureSize(128, 64);
        lightL.mirror = true;
        setRotation(lightL, 0F, 0F, 0F);
        lightR = new ModelPart(this, 89, 37);
        lightR.addCuboid(-7.5F, -6F, -2F, 2, 2, 1, false);
        lightR.setPivot(0F, 0F, 0F);
        lightR.setTextureSize(128, 64);
        lightR.mirror = true;
        setRotation(lightR, 0F, 0F, 0F);
    }

    public void render(@Nonnull MatrixStack matrix, @Nonnull VertexConsumerProvider renderer, int light, int overlayLight, boolean hasEffect) {
        render(matrix, getVertexBuilder(renderer, RENDER_TYPE, hasEffect), light, overlayLight, 1, 1, 1, 1);
        renderGlass(matrix, getVertexBuilder(renderer, GLASS_RENDER_TYPE, hasEffect), MekanismRenderer.FULL_LIGHT, overlayLight, 1, 1, 1, 0.3F);
    }

    @Override
    public void render(@Nonnull MatrixStack matrix, @Nonnull VertexConsumer vertexBuilder, int light, int overlayLight, float red, float green, float blue, float alpha) {
        helmetFeed.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        tubeBack.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        tubeL.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        tubeR.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        tubeFront.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        mouthIntake.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        finUpperR.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        finUpperL.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        finMidR.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        finMidL.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        finBack.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        topPlate.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        filterL.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        filterR.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        filterPipeLower.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        filterPipeUpper.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);

        pipeCornerFL.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        pipeCornerFR.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        pipeCornerBR.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        pipeCornerBL.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);

        //These should be full bright
        lightL.render(matrix, vertexBuilder, MekanismRenderer.FULL_LIGHT, overlayLight, red, green, blue, alpha);
        lightR.render(matrix, vertexBuilder, MekanismRenderer.FULL_LIGHT, overlayLight, red, green, blue, alpha);
    }

    private void renderGlass(@Nonnull MatrixStack matrix, @Nonnull VertexConsumer vertexBuilder, int light, int overlayLight, float red, float green, float blue, float alpha) {
        glassTop.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        glassFront.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        glassR.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        glassL.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        glassBackR.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
        glassBackL.render(matrix, vertexBuilder, light, overlayLight, red, green, blue, alpha);
    }
}